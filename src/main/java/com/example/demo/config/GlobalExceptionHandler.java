package com.example.demo.config;import com.example.demo.modules.test.dto.response.TestResponseDTO;import com.example.demo.utils.ResultUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;/** * @description: 全局统一处理异常 * @author: Mr.monster.liu * @create: 2021-05-11 16:26 **///注解定义全局异常处理类@ControllerAdvicepublic class GlobalExceptionHandler {    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalExceptionHandler.class);    // @ExceptionHandler 注解声明异常处理方法    @ExceptionHandler()    @ResponseBody    ResultUtil<Object> handleException(Exception e){        LOGGER.error(e.getMessage());        ResultUtil<Object> resultUtil = new ResultUtil<>();        resultUtil.setMsg("异常:"+e.getMessage());        resultUtil.setCode(101);        return resultUtil;    }    /**     * 处理所有业务异常     * @param e     * @return     */   /* @ExceptionHandler(BusinessException.class)    @ResponseBody    AppResponse handleBusinessException(BusinessException e){        LOGGER.error(e.getMessage(), e);        AppResponse response = new AppResponse();        response.setFail(e.getMessage());        return response;    }*/    /**     * 处理所有接口数据验证异常     * @param e     * @return     */    @ExceptionHandler(MethodArgumentNotValidException.class)    @ResponseBody    ResultUtil<Object> handleMethodArgumentNotValidException(MethodArgumentNotValidException e){        LOGGER.error(e.getMessage(), e);        ResultUtil<Object> objectResultUtil = new ResultUtil<>();        objectResultUtil.setMsg(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        return objectResultUtil;    }}