package com.example.demo.config.global_exception;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.*;/** * @description: 全局统一处理异常 * @author: Mr.monster.liu * @create: 2021-05-11 16:26 **///注解定义全局异常处理类@ControllerAdvice@Slf4jpublic class GlobalExceptionHandler {    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalExceptionHandler.class);    /**     * 处理所有业务异常     * @param e     * @return     */   /* @ExceptionHandler(BusinessException.class)    @ResponseBody    AppResponse handleBusinessException(BusinessException e){        LOGGER.error(e.getMessage(), e);        AppResponse response = new AppResponse();        response.setFail(e.getMessage());        return response;    }*/    /**     * 处理所有接口数据验证异常     * @param e     * @return     */    @ExceptionHandler(MethodArgumentNotValidException.class)    @ResponseBody    public ResultUtil handleMethodArgumentNotValidException(MethodArgumentNotValidException e){        log.info("数据验证异常:",e);        ResultUtil resultUtil = new ResultUtil();        resultUtil.setCode(ResultCode.ERROR_NOT_VALID.getCode());        resultUtil.setMsg(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        return resultUtil;    }    /**     * 处理空指针的异常     * @param     * @param e     * @return     */    @ExceptionHandler(value =NullPointerException.class)    @ResponseBody    public ResultUtil handleException(NullPointerException e){        log.info("空指针异常:",e);        ResultUtil resultUtil = new ResultUtil();        resultUtil.setCode(ResultCode.ERROR_NOT_POINT.getCode());        resultUtil.setMsg(ResultCode.ERROR_NOT_POINT.getMsg());        return resultUtil;    }    // @ExceptionHandler 注解声明异常处理方法    @ExceptionHandler()    @ResponseBody    public ResultUtil handleException(Exception e){        log.info("空指针异常:" + e.getMessage());        ResultUtil resultUtil = new ResultUtil();        resultUtil.setCode(ResultCode.ERROR_EXCEPTION.getCode());        resultUtil.setMsg(ResultCode.ERROR_EXCEPTION.getMsg());        return resultUtil;    }}